unit Model.Ordem_Servico;

interface

uses FireDAC.Comp.Client, Data.DB, System.SysUtils, Model.Connection;

type
  TOrdem_Servico = class

    private
      FID_ORDEM_SERVICO: Integer;
      FID_USUARIO_CRIADOR: Integer;
      FID_TECNICO_RESPONSAVEL: Integer;
      FID_EMPRESA: Integer;
      FDESCRICAO: String;
      FDATA_CRIACAO: TDateTime;
      FDATA_FECHAMENTO: TDateTime;
      FSTATUS: String;
      FPRIORIDADE: String;
      FFORMA_ATENDIMENTO: String;

      public

      //Creator and Destructor
      constructor Create;
      destructor Destroy; override;

      property ID_ORDEM_SERVICO : Integer read FID_ORDEM_SERVICO write FID_ORDEM_SERVICO;
      property ID_USUARIO_CRIADOR : Integer read FID_USUARIO_CRIADOR write FID_USUARIO_CRIADOR;
      property ID_TECNICO_RESPONSAVEL : Integer read FID_TECNICO_RESPONSAVEL write FID_TECNICO_RESPONSAVEL;
      property ID_EMPRESA : Integer read FID_EMPRESA write FID_EMPRESA;
      property DESCRICAO : String read FDESCRICAO write FDESCRICAO;
      property DATA_CRIACAO : TDateTime read FDATA_CRIACAO write FDATA_CRIACAO;
      property DATA_FECHAMENTO : TDateTime read FDATA_FECHAMENTO write FDATA_FECHAMENTO;
      property STATUS : String read FSTATUS write FSTATUS;
      property PRIORIDADE : String read FPRIORIDADE write FPRIORIDADE;
      property FORMA_ATENDIMENTO : String read FFORMA_ATENDIMENTO write FFORMA_ATENDIMENTO;

      function ListarOdemServico(order_by: String; out erro: String): TFDQuery;
      function InserirOdemServico(out erro: String): Boolean;
      function ExcluirOdemServico(out erro: String): Boolean;
      function EditarOdemServico(out erro: String): Boolean;

  end;




implementation

constructor TOrdem_Servico.Create;
begin
  Model.Connection.Connect;
end;

destructor TOrdem_Servico.Destroy;
begin
  Model.Connection.Disconect;
end;

function TOrdem_Servico.ListarOdemServico(order_by: String; out erro: String): TFDQuery;
var
  Query: TFDQuery;
begin
  try
    Query := TFDQuery.Create(nil);
    Query.Connection := Model.Connection.FConnection;

    with Query do
      begin
        Active := False;
        SQL.Clear;
        SQL.Add('SELECT * FROM ORDEM_SERVICO WHERE 1 = 1');

        if ID_ORDEM_SERVICO > 0 then
            begin
              SQL.Add('AND ID_ORDEM_SERVICO = :ID_ORDEM_SERVICO');
              ParamByName('ID_ORDEM_SERVICO').Value := ID_ORDEM_SERVICO;
            end;

        if order_by = '' then
            SQL.Add('ORDER BY DATA_CRIACAO')
        else
          SQL.Add('ORDER BY DATA_CRIACAO' + order_by);

        Active := True;
      end;

      erro := '';

      Result := Query;
  except on ex:Exception do
    begin
      erro := 'Erro ao consultar ordens de serviço: ' + ex.Message;
      Result := nil;
    end;

  end;
end;

function TOrdem_Servico.InserirOdemServico(out erro: String): Boolean;
var
  query : TFDQuery;
begin
  //VALIDAÇÕES
  if DESCRICAO.IsEmpty then
    begin
      Result := False;
      erro := 'Informe uma descrição';
      Exit;
    end;

    try
      query := TFDQuery.Create(nil);
      query.Connection := Model.Connection.FConnection;

      with query do
        begin
          Active := False;
          SQL.Clear;
          SQL.Add('INSERT INTO ordem_servico (ID_USUARIO_CRIADOR, ID_TECNICO_RESPONSAVEL, ID_EMPRESA, ' +
                  'DESCRICAO, DATA_CRIACAO, DATA_FECHAMENTO, STATUS, PRIORIDADE, FORMA_ATENDIMENTO) ' +
                  'VALUES (:ID_USUARIO_CRIADOR, :ID_TECNICO_RESPONSAVEL, :ID_EMPRESA, :DESCRICAO, :DATA_CRIACAO, ' +
                  ':DATA_FECHAMENTO, :STATUS, :PRIORIDADE, :FORMA_ATENDIMENTO)');

          ParamByName('ID_USUARIO_CRIADOR').Value  := ID_USUARIO_CRIADOR;
          ParamByName('ID_TECNICO_RESPONSAVEL').Value := ID_TECNICO_RESPONSAVEL;
          ParamByName('ID_EMPRESA').Value  := ID_EMPRESA;
          ParamByName('DESCRICAO').Value  := DESCRICAO;
          ParamByName('DATA_CRIACAO').Value := DATA_CRIACAO;
          ParamByName('DATA_FECHAMENTO').Value  := DATA_FECHAMENTO;
          ParamByName('STATUS').Value  := STATUS;
          ParamByName('PRIORIDADE').Value := PRIORIDADE;
          ParamByName('FORMA_ATENDIMENTO').Value  := FORMA_ATENDIMENTO;


          ExecSQL;

          //BUSCA ID INSERIDO
          Params.Clear;
          SQL.Clear;
          SQL.Add('SELECT MAX (ID_ORDEM_SERVICO) AS ID_ORDEM_SERVICO FROM ORDEM_SERVICO');
          SQL.Add('WHERE DESCRICAO = :DESCRICAO');
          ParamByName('DESCRICAO').Value := DESCRICAO;
          Active:= True;

          ID_ORDEM_SERVICO := FieldByName('ID_ORDEM_SERVICO').AsInteger;
        end;

        query.Free;
        erro := '';
        Result := True;
    except on ex:exception do
      begin
        erro := 'Erro ao cadastrar ordem de serviço: ' + ex.Message;
        Result := False;
      end;

    end;
end;

function TOrdem_Servico.EditarOdemServico(out erro: String): Boolean;
var
  query : TFDQuery;
begin
  try
    query := TFDQuery.Create(nil);
    query.Connection := Model.Connection.FConnection;

    with query do
      begin
        Active := False;
        SQL.Clear;
        SQL.Add('UPDATE ordem_servico ' +
                'SET ID_TECNICO_RESPONSAVEL = :ID_TECNICO_RESPONSAVEL, ID_EMPRESA = :ID_EMPRESA, DESCRICAO = :DESCRICAO, ' +
                'DATA_FECHAMENTO = :DATA_FECHAMENTO, STATUS = :STATUS, PRIORIDADE = :PRIORIDADE, FORMA_ATENDIMENTO = :FORMA_ATENDIMENTO ' +
                'WHERE ID_ORDEM_SERVICO = :ID_ORDEM_SERVICO AND ID_USUARIO_CRIADOR = :ID_USUARIO_CRIADOR AND DATA_CRIACAO = :DATA_CRIACAO;');

          ParamByName('ID_USUARIO_CRIADOR').Value  := ID_USUARIO_CRIADOR;
          ParamByName('ID_TECNICO_RESPONSAVEL').Value := ID_TECNICO_RESPONSAVEL;
          ParamByName('ID_EMPRESA').Value  := ID_EMPRESA;
          ParamByName('DESCRICAO').Value  := DESCRICAO;
          ParamByName('DATA_CRIACAO').Value := DATA_CRIACAO;
          ParamByName('DATA_FECHAMENTO').Value  := DATA_FECHAMENTO;
          ParamByName('STATUS').Value  := STATUS;
          ParamByName('PRIORIDADE').Value := PRIORIDADE;
          ParamByName('FORMA_ATENDIMENTO').Value  := FORMA_ATENDIMENTO;

        ExecSQL;
      end;

    query.Free;
    erro := '';
    Result := True;

  except on ex:exception do
    begin
      erro := 'Erro ao excluir cliente ' + ex.Message;
      Result := False;
    end;
  end;
end;

end.
